% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nnmf.R
\name{nnmf}
\alias{nnmf}
\title{Fast non-negative matrix factorization by ANLS with MSE loss}
\usage{
nnmf(
  A,
  k = NULL,
  max.iter = 1000,
  rel.tol = 0.001,
  n.threads = 0,
  verbose = TRUE,
  trace = 5
)
}
\arguments{
\item{A}{A matrix to be factorized. If sparse, will be converted to dense}

\item{k}{Decomposition rank, integer (required)}

\item{max.iter}{Maximum number of alternating NNLS solutions for H and W, integer (default 1000)}

\item{rel.tol}{Stop criterion, defined as the relative tolerance between two successive iterations: |e2-e1|/avg(e1,e2). (default 1e-3)}

\item{n.threads}{Number of threads/CPUs to use. Default to 0 (all cores).}

\item{verbose}{boolean, give updates every trace iterations}

\item{trace}{An integer specifying a multiple of iterations at which MSE error should be calculated and checked for convergence. To check error every iteration, specify 1. To avoid checking error at all, specify trace > max.iter (default is 5, and is generally an efficient and effective value)}
}
\value{
A list of W and H matrices
}
\description{
Fast non-negative matrix factorization by alternating least squares with sequential coordinate descent against mean squared error loss. Methods are adapted from Lin and Boutros, 2018 BMC Bioinformatics with several improvements for efficiency in unregularized and non-masked use cases. Function is theoretically equivalent to \code{NNLM::nnmf(..., method = "scd", loss = "mse", alpha = c(0,0,0), beta = c(0,0,0), mask = NULL, init = NULL)}. This method offers >2x faster calculation than NNLM::nnmf on a single thread for low-rank factorization of a 10k x 200 matrix, and increasingly faster with matrix size, number of threads, and rank.\n. Key differences from NNLM::nnmf are: 1) an improved OpemMP multithreading loop structure, 2) a parallelized MSE error loss function, 3) fewer conditional checks, 4) no MKL error calculations, and 5) no support for regularization, masking, or non-random initialization.\n
}
